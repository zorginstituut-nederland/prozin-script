{"version":3,"file":"chunks/97557.053f70864551da6137d3.min.js","mappings":";uNAYIA,E,y3DAXJ,gmGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,szBAAAA,EAAA,EAAAA,EAAA,iBAAAA,IAAA,uBAAAA,GAAA,UAAAA,GAAA,GAAAA,EAAA,2kCAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAaA,SAASC,EAA2B,GAAc,IAAPC,EAAG,EAARA,IAClC,OAAOC,EAAAA,EAAAA,OAAY,CACfC,KAAM,4BACNC,QAAS,6BACTC,cAAc,EACdC,KAAI,YACAC,EAAAA,EAAAA,eAAcC,KAAKC,IAEnB,IAAMC,EAAWF,KAAKC,GAAGE,cAAc,sBACjCC,EAAaJ,KAAKC,GAAGE,cAAc,wBAEzCD,GACIA,EAASG,iBAAiB,SAAS,WAC/BZ,EAAIa,QAAQC,MAAMC,OACtB,IAEJJ,GACIA,EAAWC,iBAAiB,SAAS,WACjCZ,EAAIgB,OAAOC,SAASC,mBACpBlB,EAAIgB,OAAOC,SAASE,kBACpBnB,EAAIgB,OAAOC,SAASG,OACxB,GACR,GAER,CA6HO,SAASf,EAAK,GAAiB,IAAfL,EAAG,EAAHA,IAAKqB,EAAM,EAANA,OACxBA,EAAOT,iBAAiB,SAAS,WAC7B,GAAIU,EAAAA,EAAAA,SAAatB,EAAIuB,WAAY,kBAAmB,QAAUvB,EAA9D,CAYA,IAAMwB,EAzId,SAAqB,GAAS,MAAPxB,EAAG,EAAHA,IACnB,OAAOC,EAAAA,EAAAA,OAAY,CACfC,KAAM,qBACNC,QAA0B,QAAnB,EAAEH,EAAIyB,QAAQX,aAAK,aAAjB,EAAmBY,MAC5BtB,cAAc,EACdC,KAAI,WAAG,QACGsB,EAAcpB,KAAKC,GAEnBoB,EAAYD,EAAYjB,cAAc,qBAC5C,GAAKkB,EAAL,CAKA,IAAMC,EAAcF,EAAYjB,cAAc,uBACxCoB,EAAgBH,EAAYjB,cAAc,yBAC1CqB,EAAgBJ,EAAYjB,cAAc,2CAEhDJ,EAAAA,EAAAA,eAAcqB,GAGd,IAAMK,EAAahC,EAAIgB,OAAOiB,MAAMC,IAAIC,OACpCnC,EAAIgB,OAAOiB,MAAMG,UAAUC,MAI/BrC,EAAIgB,OAAOC,SAASC,mBACpB,IAQgB,EAEK,EAVfoB,EAActC,EAAIgB,OAAOiB,MAAMC,IAAIC,OACrCnC,EAAIgB,OAAOiB,MAAMG,UAAUC,MAEzBE,EAAkBD,SAEvB,QAFkC,EAAXA,EAAaE,QAAQA,QAAQC,QACjD,SAACC,GAAE,MAAsB,eAAjBA,EAAGC,KAAKzC,IAAqB,WACxC,WAFkC,EAAX,EAEpB,GAGA8B,IACAJ,EAAUgB,OAAwB,QAAhB,EAAAZ,EAAWa,aAAK,aAAhB,EAAkBC,MAAO,GACvCjB,IACAA,EAAYe,OAAwB,QAAhB,EAAAZ,EAAWa,aAAK,aAAhB,EAAkBE,QAAS,KAGnDR,GAAmBT,IACnBA,EAAcc,MAAQL,EAAgBS,aAAe,IAGzD,IAAMC,EAAkB,SAACC,GACrBlD,EAAIgB,OAAOC,SAASkC,cAAc,CAC9BR,KAAM,SACNH,QAAS,CACL,CACIG,KAAM,QACNE,MAAO,EAAF,CACDC,IAAKlB,EAAUgB,QACXf,aAAW,EAAXA,EAAae,QAAS,CAAEG,MAAOlB,EAAYe,UAEtD,SAEGd,SAAAA,EAAec,MACb,CACI,CACID,KAAM,aACNH,QAAS,CACL,CACIG,KAAM,OACNS,KAAMtB,EAAcc,UAKpC,QAGI,IAAdM,IAGAlD,EAAIgB,OAAOC,SAASC,mBACpBlB,EAAIgB,OAAOC,SAASG,MAAMpB,EAAIgB,OAAOiB,MAAMG,UAAUiB,IAG7D,EAGMC,EAAqD,QAAjD,EAAGhC,EAAAA,EAAAA,sBAA0BK,EAAa,eAAO,aAA9C,EAAiD,GAC1D2B,GACAC,EAAAA,EAAAA,mBAA0BD,EAAM,SAAU,uBAAuB,SAACE,GAG9DA,EAAEC,gBACN,IAEA1B,EAEAwB,EAAAA,EAAAA,mBACIxB,EACA,QACA,wBACA,kBAAMkB,GAAgB,EAAK,KAI/BM,EAAAA,EAAAA,mBACI3B,EACA,SACA,mBACAqB,GAEJM,EAAAA,EAAAA,mBACI1B,EACA,SACA,qBACAoB,GAEJM,EAAAA,EAAAA,mBACIzB,EACA,SACA,uBACAmB,GAxGR,MAFIS,EAAAA,GAAAA,KAAS,qCA6GjB,GAER,CAgBoC/B,CAAY,CAAE3B,IAAKA,IAC/C2D,EAAAA,EAAAA,SAAkBnC,EAAoBoC,UAAU1D,MAAQsB,EACxDqC,SAASjD,iBACL,6BACA,SAAC4C,GACGG,EAAAA,EAAAA,KAAcH,EAAEM,OAAOC,SAAU,CAACvC,EAAoBoC,UAAU1D,MACpE,GACA,CAAE8D,MAAM,GAdZ,CAgBJ,IAEAhE,EAAIgB,OAAOiD,GAAG,kBAAiB,YAAE,8EAC7BjE,EAAIgB,OAAOkD,SAAS,SACd7C,EAAO8C,UAAUC,IAAI,UACrB/C,EAAO8C,UAAUE,OAAO,UAC9BrE,EAAIgB,OAAOsD,MAAMC,WACXlD,EAAO8C,UAAUE,OAAO,YACxBhD,EAAO8C,UAAUC,IAAI,YAEvBpE,EAAIyB,QAAQX,MAAM0D,MAElBC,EAAAA,EAAAA,SAAc,YAAC,8EAC+B,GAA1CC,QAAQhB,IAAI1D,EAAIgB,OAAOkD,SAAS,UAC3BlE,EAAIgB,OAAOkD,SAAS,SAAU,CAAF,eAS5B,OAPGrE,KAEA8E,EAAAA,EAAAA,GAAmB,CACfC,SAAU/E,EACVgF,aAAc,8BAElBhF,EAAwB,MAC3B,2CAKyBiF,EAAAA,EAAAA,GAAa,CACvCC,IAAK/E,EAAIyB,QAAQX,MAAM0D,KACvBxD,OAAQhB,EAAIgB,OACZ4D,SAAU/E,EACVmF,QAASjF,EAA2B,CAAEC,IAAKA,IAC3CiF,YAAa,sBACf,OANFpF,EAAwB,EAAH,gDAOtB,GAvBH4E,GAwBH,2CAET,CAEO,IAAMS,EAAU,WACnB,IAAMC,EAAa,SAACrC,GAAG,OAAKA,EAAIsC,QAAQ,gBAAkB,CAAC,EACrDC,EAAW,SAACvC,GAAG,OAAKA,EAAIsC,QAAQ,cAAgB,CAAC,EAEvD,OAAOE,EAAAA,KAAAA,OAAY,CACfpF,KAAM,QAENqF,WAAU,WACN,MAAO,CACHC,eAAgB,CAAC,EAEzB,EAEAC,MAAO,QAEPC,gBAAgB,EAChBC,WAAW,EACXC,WAAW,EACXC,YAAY,EAEZC,cAAa,WACT,MAAO,CACHhD,IAAK,CACDiD,QAAS,MAEbhD,MAAO,CACHgD,QAAS,MAGrB,EAEAC,UAAS,WACL,MAAO,CACH,CACIC,IAAK,6BACLC,SAAU,SAACC,GAAI,OACVhB,EAAWgB,EAAKC,aAAa,SAC1Bf,EAASc,EAAKC,aAAa,SAAW,IAC1C,IAAI,GAGpB,EAEAC,WAAU,YAAqB,IAcvBxD,EAdK2C,EAAc,EAAdA,eAeT,GAAIL,EAAWK,EAAe1C,KAAM,SAK1BwD,EAAgD,QAA7C,GAJTzD,EAAQ,EAAH,KACE2C,GAhBgB,CACvBe,MAAO,MACPC,OAAQ,MACRC,gBAAiB,GACjBC,YAAa,OAeK5D,IAAI6D,MAAK,EAAC,mBAAyB,iBAAC,OAAQ,QAAR,EAA1C,EAA4CC,cAAM,WAAR,EAA1C,EAAoDN,IAC5DA,IACAzD,EAAMC,IAAM,iCAAH,OAAoCwD,GAErD,CACA,GAAIjB,EAASG,EAAe1C,KAAM,SAKxBwD,EAAkD,QAA/C,GAJTzD,EAAQ,EAAH,KACE2C,GApBc,CACrBe,MAAO,MACPC,OAAQ,MACRC,gBAAiB,GACjBC,YAAa,OAmBK5D,IAAI6D,MAAK,EAAC,sBAA2B,iBAAC,OAAQ,QAAR,EAA5C,EAA8CC,cAAM,WAAR,EAA5C,EAAsDN,IAC9DA,IACAzD,EAAMC,IAAM,kCAAH,OAAqCwD,GAEtD,CAEA,MAAO,CAAC,UAAUO,EAAAA,EAAAA,iBAAgBtG,KAAKkB,QAAQ+D,eAAgB3C,GACnE,EAEAiE,YAAW,WAAG,WACV,MAAO,CACHvC,SACI,SAAC9C,GAAO,OACR,YACI,OADO,EAARR,SACiBkC,cAAc,CAC1BR,KAAM,EAAKzC,KACX2C,MAAOpB,GAEf,CAAC,EAEb,EAEAsF,sBAAqB,WAAG,WACpB,MAAO,CACH,IAAIC,EAAAA,GAAO,CACPC,MAAO,CACHC,gBAAiB,CAEbC,UAAW,SAACC,EAAMC,GACd,IAAKA,EAAMC,OACP,OAAO,EAGX,IAAMC,EAAMH,EAAKI,SAASH,EAAMC,OAAQ,GAOxC,OANaF,EAAKnF,MAAMC,IAAIuF,QAAQF,GAE3BG,OAAO/E,OAAS,EAAKA,MAC1B0E,EAAM5D,kBAGH,CACX,MAKpB,GAER,C","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/embed.js"],"sourcesContent":["// From: tiptap/demos/src/Experiments/GenericFigure/Vue/figure.ts\nimport { context_menu, context_menu_close } from \"../context_menu\";\nimport { focus_handler } from \"../focus-handler\";\nimport { log } from \"../tiptap\";\nimport { Node, mergeAttributes } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport Registry from \"@patternslib/patternslib/src/core/registry\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nlet context_menu_instance;\n\nfunction pattern_embed_context_menu({ app: app }) {\n    return Base.extend({\n        name: \"tiptap-embed-context-menu\",\n        trigger: \".tiptap-embed-context-menu\",\n        autoregister: false,\n        init() {\n            focus_handler(this.el);\n\n            const btn_edit = this.el.querySelector(\".tiptap-edit-embed\");\n            const btn_remove = this.el.querySelector(\".tiptap-remove-embed\");\n\n            btn_edit &&\n                btn_edit.addEventListener(\"click\", () => {\n                    app.toolbar.embed.click();\n                });\n\n            btn_remove &&\n                btn_remove.addEventListener(\"click\", () => {\n                    app.editor.commands.selectParentNode(); // Also select the surrounding <figure>\n                    app.editor.commands.deleteSelection();\n                    app.editor.commands.focus();\n                });\n        },\n    });\n}\n\nfunction embed_panel({ app }) {\n    return Base.extend({\n        name: \"tiptap-embed-panel\",\n        trigger: app.options.embed?.panel,\n        autoregister: false,\n        init() {\n            const embed_panel = this.el;\n\n            const embed_src = embed_panel.querySelector(\"[name=tiptap-src]\");\n            if (!embed_src) {\n                log.warn(\"No src input in embed panel found.\");\n                return;\n            }\n\n            const embed_title = embed_panel.querySelector(\"[name=tiptap-title]\");\n            const embed_caption = embed_panel.querySelector(\"[name=tiptap-caption]\");\n            const embed_confirm = embed_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n            focus_handler(embed_panel);\n\n            // Get embed node\n            const node_embed = app.editor.state.doc.nodeAt(\n                app.editor.state.selection.from\n            );\n\n            // Get figcaption node, if it exists\n            app.editor.commands.selectParentNode(); // Also select the surrounding <figure>\n            const node_figure = app.editor.state.doc.nodeAt(\n                app.editor.state.selection.from\n            );\n            const node_figcaption = node_figure?.content.content.filter(\n                (it) => it.type.name === \"figcaption\"\n            )?.[0];\n\n            // Populate form fields\n            if (node_embed) {\n                embed_src.value = node_embed.attrs?.src || \"\";\n                if (embed_title) {\n                    embed_title.value = node_embed.attrs?.title || \"\";\n                }\n            }\n            if (node_figcaption && embed_caption) {\n                embed_caption.value = node_figcaption.textContent || \"\";\n            }\n\n            const update_callback = (set_focus) => {\n                app.editor.commands.insertContent({\n                    type: \"figure\",\n                    content: [\n                        {\n                            type: \"embed\",\n                            attrs: {\n                                src: embed_src.value,\n                                ...(embed_title?.value && { title: embed_title.value }),\n                            },\n                        },\n                        // Conditionally add a figcaption\n                        ...(embed_caption?.value\n                            ? [\n                                  {\n                                      type: \"figcaption\",\n                                      content: [\n                                          {\n                                              type: \"text\",\n                                              text: embed_caption.value,\n                                          },\n                                      ],\n                                  },\n                              ]\n                            : []),\n                    ],\n                });\n                if (set_focus === true) {\n                    // set cursor after the embed, otherwise embed is\n                    // selected and right away deleted when starting typing.\n                    app.editor.commands.selectParentNode();\n                    app.editor.commands.focus(app.editor.state.selection.to);\n                    //app.editor.commands.blur();\n                }\n            };\n\n            // FORM UPDATE\n            const form = dom.querySelectorAllAndMe(embed_panel, \"form\")?.[0];\n            if (form) {\n                events.add_event_listener(form, \"submit\", \"tiptap_embed_submit\", (e) => {\n                    // Prevent form submission when hitting \"enter\" within the form.\n                    // The form is handled by JS only.\n                    e.preventDefault();\n                });\n            }\n            if (embed_confirm) {\n                // update on click on confirm\n                events.add_event_listener(\n                    embed_confirm,\n                    \"click\",\n                    \"tiptap_embed_confirm\",\n                    () => update_callback(true)\n                );\n            } else {\n                // update on input/change\n                events.add_event_listener(\n                    embed_src,\n                    \"change\",\n                    \"tiptap_embed_src\",\n                    update_callback\n                );\n                events.add_event_listener(\n                    embed_title,\n                    \"change\",\n                    \"tiptap_embed_title\",\n                    update_callback\n                );\n                events.add_event_listener(\n                    embed_caption,\n                    \"change\",\n                    \"tiptap_embed_caption\",\n                    update_callback\n                );\n            }\n        },\n    });\n}\n\nexport function init({ app, button }) {\n    button.addEventListener(\"click\", () => {\n        if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n            // If this pat-tiptap instance is not the one which was last\n            // focused, just return and do nothing.\n            // This might be due to one toolbar shared by multiple editors.\n            return;\n        }\n\n        // Register the embed-panel pattern.\n        // Multiple registrations from different tiptap instances are possible\n        // since we're registering it only after the toolbar's embed button has\n        // been clicked and clicking in another tiptap instance would override\n        // previous registrations.\n        const embed_panel_pattern = embed_panel({ app: app });\n        Registry.patterns[embed_panel_pattern.prototype.name] = embed_panel_pattern;\n        document.addEventListener(\n            \"patterns-injected-delayed\",\n            (e) => {\n                Registry.scan(e.detail.injected, [embed_panel_pattern.prototype.name]);\n            },\n            { once: true }\n        );\n    });\n\n    app.editor.on(\"selectionUpdate\", async () => {\n        app.editor.isActive(\"embed\")\n            ? button.classList.add(\"active\")\n            : button.classList.remove(\"active\");\n        app.editor.can().setEmbed()\n            ? button.classList.remove(\"disabled\")\n            : button.classList.add(\"disabled\");\n\n        if (app.options.embed.menu) {\n            // Open the context menu with a small delay.\n            utils.debounce(async () => {\n                console.log(app.editor.isActive(\"embed\"));\n                if (!app.editor.isActive(\"embed\")) {\n                    // Embed not active anymore. Return.\n                    if (context_menu_instance) {\n                        // If open, close.\n                        context_menu_close({\n                            instance: context_menu_instance,\n                            pattern_name: \"tiptap-embed-context-menu\",\n                        });\n                        context_menu_instance = null;\n                    }\n                    return;\n                }\n\n                // Initialize the context menu\n                context_menu_instance = await context_menu({\n                    url: app.options.embed.menu,\n                    editor: app.editor,\n                    instance: context_menu_instance,\n                    pattern: pattern_embed_context_menu({ app: app }),\n                    extra_class: \"tiptap-embed-menu\",\n                });\n            }, 50)();\n        }\n    });\n}\n\nexport const factory = () => {\n    const is_youtube = (src) => src.indexOf(\"youtube.com\") > -1;\n    const is_vimeo = (src) => src.indexOf(\"vimeo.com\") > -1;\n\n    return Node.create({\n        name: \"embed\",\n\n        addOptions() {\n            return {\n                HTMLAttributes: {},\n            };\n        },\n\n        group: \"block\",\n\n        allowGapCursor: false,\n        draggable: false,\n        isolating: true,\n        selectable: true,\n\n        addAttributes() {\n            return {\n                src: {\n                    default: null,\n                },\n                title: {\n                    default: null,\n                },\n            };\n        },\n\n        parseHTML() {\n            return [\n                {\n                    tag: `iframe[src*=\"youtube.com\"]`,\n                    getAttrs: (node) =>\n                        (is_youtube(node.getAttribute(\"src\")) ||\n                            is_vimeo(node.getAttribute(\"src\")) > -1) &&\n                        null,\n                },\n            ];\n        },\n\n        renderHTML({ HTMLAttributes }) {\n            const attributes_youtube = {\n                width: \"560\",\n                height: \"315\",\n                allowfullscreen: \"\",\n                frameborder: \"0\",\n            };\n            const attributes_vimeo = {\n                width: \"640\",\n                height: \"360\",\n                allowfullscreen: \"\",\n                frameborder: \"0\",\n            };\n\n            let attrs;\n            if (is_youtube(HTMLAttributes.src)) {\n                attrs = {\n                    ...HTMLAttributes,\n                    ...attributes_youtube,\n                };\n                const vid = attrs.src.match(/watch.*v\\=(?<vid>[^&]*)/)?.groups?.vid;\n                if (vid) {\n                    attrs.src = `https://www.youtube.com/embed/${vid}`;\n                }\n            }\n            if (is_vimeo(HTMLAttributes.src)) {\n                attrs = {\n                    ...HTMLAttributes,\n                    ...attributes_vimeo,\n                };\n                const vid = attrs.src.match(/vimeo.com\\/(?<vid>[0-9]*)/)?.groups?.vid;\n                if (vid) {\n                    attrs.src = `https://player.vimeo.com/video/${vid}`;\n                }\n            }\n\n            return [\"iframe\", mergeAttributes(this.options.HTMLAttributes, attrs)];\n        },\n\n        addCommands() {\n            return {\n                setEmbed:\n                    (options) =>\n                    ({ commands }) => {\n                        return commands.insertContent({\n                            type: this.name,\n                            attrs: options,\n                        });\n                    },\n            };\n        },\n\n        addProseMirrorPlugins() {\n            return [\n                new Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            // prevent dragging nodes out of the figure\n                            dragstart: (view, event) => {\n                                if (!event.target) {\n                                    return false;\n                                }\n\n                                const pos = view.posAtDOM(event.target, 0);\n                                const $pos = view.state.doc.resolve(pos);\n\n                                if ($pos.parent.type === this.type) {\n                                    event.preventDefault();\n                                }\n\n                                return false;\n                            },\n                        },\n                    },\n                }),\n            ];\n        },\n    });\n};\n"],"names":["context_menu_instance","i","pattern_embed_context_menu","app","Base","name","trigger","autoregister","init","focus_handler","this","el","btn_edit","querySelector","btn_remove","addEventListener","toolbar","embed","click","editor","commands","selectParentNode","deleteSelection","focus","button","dom","toolbar_el","embed_panel_pattern","options","panel","embed_panel","embed_src","embed_title","embed_caption","embed_confirm","node_embed","state","doc","nodeAt","selection","from","node_figure","node_figcaption","content","filter","it","type","value","attrs","src","title","textContent","update_callback","set_focus","insertContent","text","to","form","events","e","preventDefault","log","Registry","prototype","document","detail","injected","once","on","isActive","classList","add","remove","can","setEmbed","menu","utils","console","context_menu_close","instance","pattern_name","context_menu","url","pattern","extra_class","factory","is_youtube","indexOf","is_vimeo","Node","addOptions","HTMLAttributes","group","allowGapCursor","draggable","isolating","selectable","addAttributes","default","parseHTML","tag","getAttrs","node","getAttribute","renderHTML","vid","width","height","allowfullscreen","frameborder","match","groups","mergeAttributes","addCommands","addProseMirrorPlugins","Plugin","props","handleDOMEvents","dragstart","view","event","target","pos","posAtDOM","resolve","parent"],"sourceRoot":""}