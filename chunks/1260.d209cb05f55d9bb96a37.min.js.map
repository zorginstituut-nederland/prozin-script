{"version":3,"file":"chunks/1260.d209cb05f55d9bb96a37.min.js","mappings":"8LAKIA,E,4CA2DG,SAASC,EAAT,GAA+B,IAAfC,EAAe,EAAfA,IAAe,EAAVC,OAEjBC,iBAAiB,SAAS,WAC7BC,SAASD,iBACL,mBACA,WACQE,EAAAA,EAAAA,SAAaJ,EAAIK,WAAY,kBAAmB,QAAUL,GA/D9E,YAA+B,IAAPA,EAAO,EAAPA,IACdM,EAAeH,SAASI,cAAcP,EAAIQ,QAAQC,aACxD,GAAKH,EAAL,EAIAI,EAAAA,EAAAA,eAAcJ,GAEd,IAAMK,EAAS,WACX,IAAMC,EAAcN,EAAaC,cAAc,wBACzCM,EAAiBP,EAAaC,cAAc,0CAGlDK,EAAYE,MAAQd,EAAIe,OAAOC,UAC/BJ,EAAYK,cAAc,IAAIC,MAAM,UAEpC,IAAMC,EAAkB,SAACC,GACrB,IAAMC,EAAMrB,EAAIe,OAAOO,SACL,IAAdF,GACAC,EAAIE,QAERF,EAAIG,WAAWZ,EAAYE,OAAO,GAClCO,EAAII,KACP,EAEGZ,EAEAa,EAAAA,EAAAA,mBACIb,EACA,QACA,yBACA,kBAAMM,GAAgB,EAAtB,IAIJO,EAAAA,EAAAA,mBACId,EACA,QACA,qBACAO,EAGX,EAEDR,IACIb,GACAA,EAAe6B,cAEnB7B,EAAiB,IAAI8B,iBAAiBjB,IACvBkB,QAAQvB,EAAc,CACjCwB,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,eAAe,GAhDlB,MAFGC,EAAAA,GAAAA,KAAS,yBAoDhB,CAce5B,CAAa,CAAEN,IAAKA,GACvB,GACD,CAAEmC,MAAM,GAEf,GACJ,C,qXChFD,4gGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQ,4TAEO,IAAMC,EAAU,GAEhB,SAAS3B,EAAc4B,GAG1BA,EAAGC,aAAa,WAAY,MAC5Bb,EAAAA,EAAAA,mBACIY,EACA,QACA,iBAHJ,YAII,8EACIE,EAAAA,EAAAA,QAAc,GACdH,EAAQI,KAAI,SAACC,GAAD,OAAQA,aAAR,EAAQA,EAAIC,UAAUC,IAAI,eAA1B,IAFhB,4CAIA,GAEJlB,EAAAA,EAAAA,mBACIY,EACA,OACA,mBACA,WACID,EAAQI,KAAI,SAACC,GAAD,OAAQA,aAAR,EAAQA,EAAIC,UAAUE,OAAO,eAA7B,GACf,IACD,EAEP,C","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/source.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport { log } from \"../tiptap\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nlet panel_observer;\n\nfunction source_panel({ app }) {\n    const source_panel = document.querySelector(app.options.sourcePanel);\n    if (!source_panel) {\n        log.warn(\"No source panel found.\");\n        return;\n    }\n    focus_handler(source_panel);\n\n    const reinit = () => {\n        const source_text = source_panel.querySelector(\"[name=tiptap-source]\"); // prettier-ignore\n        const source_confirm = source_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n        // set form to initial values\n        source_text.value = app.editor.getHTML();\n        source_text.dispatchEvent(new Event(\"input\"));\n\n        const update_callback = (set_focus) => {\n            const cmd = app.editor.chain();\n            if (set_focus === true) {\n                cmd.focus();\n            }\n            cmd.setContent(source_text.value, true);\n            cmd.run();\n        };\n\n        if (source_confirm) {\n            // update on click on confirm\n            events.add_event_listener(\n                source_confirm,\n                \"click\",\n                \"tiptap_source_confirm\",\n                () => update_callback(true)\n            );\n        } else {\n            // update on input/change\n            events.add_event_listener(\n                source_text,\n                \"input\",\n                \"tiptap_source_text\",\n                update_callback\n            );\n        }\n    };\n\n    reinit();\n    if (panel_observer) {\n        panel_observer.disconnect();\n    }\n    panel_observer = new MutationObserver(reinit);\n    panel_observer.observe(source_panel, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false,\n    });\n}\n\nexport function init({ app, button }) {\n    // Initialize modal after it has injected.\n    button.addEventListener(\"click\", () => {\n        document.addEventListener(\n            \"pat-modal-ready\",\n            () => {\n                if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n                    // If this pat-tiptap instance is not the one which was last\n                    // focused, just return and do nothing.\n                    // This might be due to one toolbar shared by multiple editors.\n                    return;\n                }\n                source_panel({ app: app });\n            },\n            { once: true }\n        );\n    });\n}\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["panel_observer","init","app","button","addEventListener","document","dom","toolbar_el","source_panel","querySelector","options","sourcePanel","focus_handler","reinit","source_text","source_confirm","value","editor","getHTML","dispatchEvent","Event","update_callback","set_focus","cmd","chain","focus","setContent","run","events","disconnect","MutationObserver","observe","childList","subtree","attributes","characterData","log","once","i","TARGETS","el","setAttribute","utils","map","it","classList","add","remove"],"sourceRoot":""}