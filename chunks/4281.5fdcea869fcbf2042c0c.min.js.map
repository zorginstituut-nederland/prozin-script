{"version":3,"file":"chunks/4281.5fdcea869fcbf2042c0c.min.js","mappings":"kSAEA,MAAMA,EAAa,qCACbC,EAAa,qCACbC,EAAS,EAAAC,KAAKC,OAAO,CACvBC,KAAM,SACNC,aACI,MAAO,CACHC,eAAgB,CAAC,EAEzB,EACAC,YACI,MAAO,CACH,CACIC,IAAK,KAET,CACIA,IAAK,OAET,CACIA,IAAK,UAET,CACIC,MAAO,kBACPC,WAAW,EACXC,SAAUF,KAAUA,EAAMG,SAAS,iBAAkB,CAAC,GAGlE,EACAC,YAAW,eAAEP,IACT,MAAO,CAAC,KAAK,IAAAQ,iBAAgBC,KAAKC,QAAQV,eAAgBA,GAAiB,EAC/E,EACAW,cACI,MAAO,CACHC,UAAW,IAAM,EAAGC,cACTA,EAASC,QAAQL,KAAKX,MAEjCiB,aAAc,IAAM,EAAGF,cACZA,EAASG,WAAWP,KAAKX,MAEpCmB,YAAa,IAAM,EAAGJ,cACXA,EAASK,UAAUT,KAAKX,MAG3C,EACAqB,uBACI,MAAMC,EAAY,CAAC,EAOnB,OANI,IAAAC,WACAD,EAAU,eAAiB,IAAMX,KAAKa,OAAOT,SAASE,eAGtDK,EAAU,gBAAkB,IAAMX,KAAKa,OAAOT,SAASE,eAEpDK,CACX,EACAG,gBACI,MAAO,EACH,IAAAC,eAAc,CACVC,KAAMhC,EACNiC,KAAMjB,KAAKiB,OAGvB,EACAC,gBACI,MAAO,EACH,IAAAC,eAAc,CACVH,KAAM/B,EACNgC,KAAMjB,KAAKiB,OAGvB,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-strike/dist/index.js"],"sourcesContent":["import { Mark, mergeAttributes, isMacOS, markInputRule, markPasteRule } from '@tiptap/core';\n\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\r\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\r\nconst Strike = Mark.create({\r\n    name: 'strike',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 's',\r\n            },\r\n            {\r\n                tag: 'del',\r\n            },\r\n            {\r\n                tag: 'strike',\r\n            },\r\n            {\r\n                style: 'text-decoration',\r\n                consuming: false,\r\n                getAttrs: style => (style.includes('line-through') ? {} : false),\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setStrike: () => ({ commands }) => {\r\n                return commands.setMark(this.name);\r\n            },\r\n            toggleStrike: () => ({ commands }) => {\r\n                return commands.toggleMark(this.name);\r\n            },\r\n            unsetStrike: () => ({ commands }) => {\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        const shortcuts = {};\r\n        if (isMacOS()) {\r\n            shortcuts['Mod-Shift-s'] = () => this.editor.commands.toggleStrike();\r\n        }\r\n        else {\r\n            shortcuts['Ctrl-Shift-s'] = () => this.editor.commands.toggleStrike();\r\n        }\r\n        return shortcuts;\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            markInputRule({\r\n                find: inputRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n    addPasteRules() {\r\n        return [\r\n            markPasteRule({\r\n                find: pasteRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\nexport { Strike, Strike as default, inputRegex, pasteRegex };\n//# sourceMappingURL=index.js.map\n"],"names":["inputRegex","pasteRegex","Strike","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","style","consuming","getAttrs","includes","renderHTML","mergeAttributes","this","options","addCommands","setStrike","commands","setMark","toggleStrike","toggleMark","unsetStrike","unsetMark","addKeyboardShortcuts","shortcuts","isMacOS","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sourceRoot":""}