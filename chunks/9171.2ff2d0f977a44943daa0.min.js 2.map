{"version":3,"file":"chunks/9171.2ff2d0f977a44943daa0.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/image-figure.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport { log } from \"../tiptap\";\nimport { Node, mergeAttributes } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nlet panel_observer;\n\nfunction image_panel({ app }) {\n    const image_panel = document.querySelector(app.options.imagePanel);\n    if (!image_panel) {\n        log.warn(\"No image panel found.\");\n        return;\n    }\n    focus_handler(image_panel);\n\n    const reinit = () => {\n        const image_src = image_panel.querySelector(\"[name=tiptap-src]\");\n        const image_alt = image_panel.querySelector(\"[name=tiptap-alt]\");\n        const image_title = image_panel.querySelector(\"[name=tiptap-title]\");\n        const image_caption = image_panel.querySelector(\"[name=tiptap-caption]\");\n        const image_confirm = image_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n        const update_callback = (set_focus) => {\n            // Get the selected image on time of submitting\n            const selected_image_src = image_panel.querySelector(\n                `[name=tiptap-src][type=radio]:checked,\n                         [name=tiptap-src][type=checkbox]:checked,\n                         [name=tiptap-src][type=option]:checked,\n                         [name=tiptap-src][type=hidden],\n                         [name=tiptap-src][type=text]`\n            );\n\n            const cmd = app.editor.chain();\n            cmd.insertContent({\n                type: \"figure\",\n                content: [\n                    {\n                        type: \"image-figure\",\n                        attrs: {\n                            src: selected_image_src.value,\n                            ...(image_alt?.value && { alt: image_alt.value }),\n                            ...(image_title?.value && { title: image_title.value }),\n                        },\n                    },\n                    // Conditionally add a figcaption\n                    ...(image_caption?.value\n                        ? [\n                              {\n                                  type: \"figcaption\",\n                                  content: [\n                                      {\n                                          type: \"text\",\n                                          text: image_caption.value,\n                                      },\n                                  ],\n                              },\n                          ]\n                        : []),\n                ],\n            });\n            if (set_focus === true) {\n                // set focus after setting image, otherwise image is\n                // selected and right away deleted when starting typing.\n                cmd.focus();\n            }\n            cmd.run();\n        };\n\n        // FORM UPDATE\n        if (image_confirm) {\n            // update on click on confirm\n            events.add_event_listener(\n                image_confirm,\n                \"click\",\n                \"tiptap_image_confirm\",\n                () => update_callback(true)\n            );\n        } else {\n            // update on input/change\n            events.add_event_listener(\n                image_src,\n                \"change\",\n                \"tiptap_image_src\",\n                update_callback\n            );\n            events.add_event_listener(\n                image_alt,\n                \"change\",\n                \"tiptap_image_alt\",\n                update_callback\n            );\n            events.add_event_listener(\n                image_title,\n                \"change\",\n                \"tiptap_image_title\",\n                update_callback\n            );\n            events.add_event_listener(\n                image_caption,\n                \"change\",\n                \"tiptap_image_caption\",\n                update_callback\n            );\n        }\n    };\n\n    reinit();\n    if (panel_observer) {\n        panel_observer.disconnect();\n    }\n    panel_observer = new MutationObserver(reinit);\n    panel_observer.observe(image_panel, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false,\n    });\n}\n\nexport function init({ app, button }) {\n    // Initialize modal after it has injected.\n    button.addEventListener(\"click\", () => {\n        document.addEventListener(\n            \"pat-modal-ready\",\n            () => {\n                if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n                    // If this pat-tiptap instance is not the one which was last\n                    // focused, just return and do nothing.\n                    // This might be due to one toolbar shared by multiple editors.\n                    return;\n                }\n                image_panel({ app: app });\n            },\n            { once: true }\n        );\n    });\n}\n\nexport const factory = () => {\n    return Node.create({\n        name: \"image-figure\",\n\n        addOptions() {\n            return {\n                HTMLAttributes: {},\n            };\n        },\n\n        addAttributes() {\n            return {\n                src: {\n                    default: null,\n                },\n                alt: {\n                    default: null,\n                },\n                title: {\n                    default: null,\n                },\n            };\n        },\n\n        group: \"block\",\n        inline: false,\n\n        allowGapCursor: false,\n        atom: true,\n        draggable: false,\n        isolating: true,\n        selectable: false,\n\n        parseHTML() {\n            return [\n                {\n                    tag: \"img\",\n                    getAttrs: (node) => node.closest(\"figure\") !== null && null, // prosemirror expects null for a successful check.\n                },\n            ];\n        },\n\n        renderHTML({ HTMLAttributes }) {\n            return [\"img\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n        },\n\n        addProseMirrorPlugins() {\n            return [\n                new Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            dragstart: (view, event) => {\n                                // prevent drag/drop at all.\n                                event.preventDefault();\n                                return false;\n                            },\n                        },\n                    },\n                }),\n            ];\n        },\n    });\n};\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["panel_observer","init","app","button","addEventListener","document","dom","toolbar_el","image_panel","querySelector","options","imagePanel","focus_handler","reinit","image_src","image_alt","image_title","image_caption","image_confirm","update_callback","set_focus","selected_image_src","cmd","editor","chain","insertContent","type","content","attrs","src","value","alt","title","text","focus","run","events","disconnect","MutationObserver","observe","childList","subtree","attributes","characterData","log","once","factory","Node","name","addOptions","HTMLAttributes","addAttributes","default","group","inline","allowGapCursor","atom","draggable","isolating","selectable","parseHTML","tag","getAttrs","node","closest","renderHTML","mergeAttributes","this","addProseMirrorPlugins","Plugin","props","handleDOMEvents","dragstart","view","event","preventDefault","i","TARGETS","el","setAttribute","utils","map","it","classList","add","remove"],"sourceRoot":""}