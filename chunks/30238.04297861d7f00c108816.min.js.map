{"version":3,"file":"chunks/30238.04297861d7f00c108816.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/context_menu.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import Registry from \"@patternslib/patternslib/src/core/registry\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport patTooltip from \"@patternslib/patternslib/src/pat/tooltip/tooltip\";\nimport { posToDOMRect } from \"@tiptap/core\";\n\nlet PREV_NODE = null;\n\nexport async function context_menu({\n    url,\n    editor,\n    instance = null,\n    pattern = null,\n    extra_class = null,\n}) {\n    const prev_node = PREV_NODE;\n    const cur_node = (PREV_NODE = editor.state.doc.nodeAt(editor.state.selection.from));\n\n    if (\n        instance !== null &&\n        (cur_node !== prev_node || !instance?.tippy.popperInstance)\n    ) {\n        // Close context menu, when new node is selected.\n        context_menu_close({\n            instance: instance,\n            pattern_name: pattern.prototype.name,\n        });\n        instance = null;\n    }\n\n    if (!instance || !instance?.tippy.popperInstance) {\n        // Only re-initialize when not already opened.\n\n        // 1) Dynamically register a pattern to be used in the context menu\n        //    We need to unregister it after use in ``context_menu_close``\n        //    to allow multiple tiptap editors on the same page because it\n        //    references the current editor instance.\n        if (pattern) {\n            Registry.patterns[pattern.prototype.name] = pattern;\n        }\n\n        // 2) Initialize the tooltip\n        const editor_element = editor.options.element;\n        instance = await new patTooltip(editor_element, {\n            \"source\": \"ajax\",\n            \"url\": url,\n            \"trigger\": \"none\",\n            \"class\": extra_class,\n            \"position-list\": [\"tl\"],\n        });\n\n        await events.await_pattern_init(instance);\n\n        const reference_position = posToDOMRect(\n            editor.view,\n            editor.state.selection.from,\n            editor.state.selection.to\n        );\n\n        instance.tippy?.setProps({\n            // NOTE: getReferenceClientRect is called after each setContent.\n            getReferenceClientRect: () => reference_position,\n        });\n\n        events.add_event_listener(\n            document,\n            \"mousedown\",\n            \"tiptap--context_menu_close--click\",\n            (e) => {\n                if (\n                    [e.target, ...dom.get_parents(e.target)].includes(\n                        instance?.tippy.popper\n                    )\n                ) {\n                    // Do not close the context menu if we click in it.\n                    return;\n                }\n                context_menu_close({\n                    instance: instance,\n                    pattern_name: pattern.prototype.name,\n                });\n            }\n        );\n        events.add_event_listener(\n            document,\n            \"keydown\",\n            \"tiptap--context_menu_close--esc\",\n            (e) => {\n                if (e.key !== \"Escape\") {\n                    // Not a closing key.\n                    return;\n                }\n                context_menu_close({\n                    instance: instance,\n                    pattern_name: pattern.prototype.name,\n                });\n            }\n        );\n\n        instance.show();\n    } else {\n        instance.get_content(url);\n    }\n\n    return instance;\n}\n\nexport function context_menu_close({ instance, pattern_name }) {\n    // Hide and destroy the context menu / tooltip instance\n    if (instance) {\n        instance.hide();\n        instance.destroy();\n        instance = null;\n    }\n\n    // Unregister the pattern\n    if (pattern_name) {\n        delete Registry.patterns[pattern_name];\n    }\n    events.remove_event_listener(document, \"tiptap--context_menu_close--click\");\n    events.remove_event_listener(document, \"tiptap--context_menu_close--esc\");\n    return null;\n}\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["i","PREV_NODE","context_menu","url","editor","instance","pattern","extra_class","prev_node","cur_node","state","doc","nodeAt","selection","from","tippy","popperInstance","context_menu_close","pattern_name","prototype","name","Registry","editor_element","options","element","patTooltip","events","reference_position","posToDOMRect","view","to","setProps","getReferenceClientRect","document","e","target","dom","includes","popper","key","show","get_content","hide","destroy","TARGETS","focus_handler","el","setAttribute","utils","map","it","classList","add","remove"],"sourceRoot":""}