{"version":3,"file":"chunks/11260.c350d8eba577a94f2996.min.js","mappings":"4OAqEO,SAASA,EAAK,GAAiB,IAAfC,EAAG,EAAHA,IAAW,EAANC,OACjBC,iBAAiB,SAAS,WAC7B,GAAIC,EAAAA,EAAAA,SAAaH,EAAII,WAAY,kBAAmB,QAAUJ,EAA9D,CAYA,IAAMK,EA9Ed,SAAsB,GAAS,IAAPL,EAAG,EAAHA,IACpB,MAAO,CACHM,KAAM,sBACNC,QAASP,EAAIQ,QAAQC,YAErBV,KAAI,SAACW,GAAc,OACfC,EAAAA,EAAAA,eAAcD,GAEd,IAAME,EAAcF,EAAaG,cAAc,wBAC/C,GAAKD,EAAL,CAKA,IAAME,EAAiBJ,EAAaG,cAAc,0CAGlDD,EAAYG,MAAQf,EAAIgB,OAAOC,UAC/BL,EAAYM,cAAc,IAAIC,MAAM,UAEpC,IAAMC,EAAkB,SAACC,GACrB,IAAMC,EAAMtB,EAAIgB,OAAOO,SACL,IAAdF,GACAC,EAAIE,QAERF,EAAIG,WAAWb,EAAYG,OAAO,GAClCO,EAAII,KACR,EAGMC,EAAsD,QAAlD,EAAGxB,EAAAA,EAAAA,sBAA0BO,EAAc,eAAO,aAA/C,EAAkD,GAC3DiB,GACAC,EAAAA,EAAAA,mBACID,EACA,SACA,wBACA,SAACE,GAGGA,EAAEC,gBACN,IAGJhB,EAEAc,EAAAA,EAAAA,mBACId,EACA,QACA,yBACA,kBAAMM,GAAgB,EAAK,IAI/BQ,EAAAA,EAAAA,mBACIhB,EACA,QACA,qBACAQ,EA7CR,MAFIW,EAAAA,GAAAA,KAAS,yCAkDjB,EAER,CAgBqCrB,CAAa,CAAEV,IAAKA,IACjDgC,SAAS9B,iBACL,6BACA,SAAC2B,GACGxB,EAAqBN,KAAK8B,EAAEI,OAAOC,UAGnClC,EAAImC,cAAcjC,iBAAiB,6BAA6B,WAE5DG,EAAqBN,KAAKC,EAAImC,cAClC,GACJ,GACA,CAAEC,MAAM,GAnBZ,CAqBJ,GACJ,C,ygBCjGA,8lGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEO,IAAMC,EAAU,GAEhB,SAAS3B,EAAc4B,GAG1BA,EAAGC,aAAa,WAAY,MAC5BZ,EAAAA,EAAAA,mBACIW,EACA,QACA,iBAAgB,YAChB,8EACIE,EAAAA,EAAAA,QAAc,GACdH,EAAQI,KAAI,SAACC,GAAE,OAAKA,aAAE,EAAFA,EAAIC,UAAUC,IAAI,eAAe,IAAE,4CAE3D,GAEJjB,EAAAA,EAAAA,mBACIW,EACA,OACA,mBACA,WACID,EAAQI,KAAI,SAACC,GAAE,OAAKA,aAAE,EAAFA,EAAIC,UAAUE,OAAO,eAAe,GAC5D,IACA,EAER,C","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/source.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport { log } from \"../tiptap\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nfunction source_panel({ app }) {\n    return {\n        name: \"tiptap-source-panel\",\n        trigger: app.options.sourcePanel,\n\n        init(source_panel) {\n            focus_handler(source_panel);\n\n            const source_text = source_panel.querySelector(\"[name=tiptap-source]\"); // prettier-ignore\n            if (!source_text) {\n                log.warn(\"No source input in source panel found.\");\n                return;\n            }\n\n            const source_confirm = source_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n            // set form to initial values\n            source_text.value = app.editor.getHTML();\n            source_text.dispatchEvent(new Event(\"input\"));\n\n            const update_callback = (set_focus) => {\n                const cmd = app.editor.chain();\n                if (set_focus === true) {\n                    cmd.focus();\n                }\n                cmd.setContent(source_text.value, true);\n                cmd.run();\n            };\n\n            // FORM UPDATE\n            const form = dom.querySelectorAllAndMe(source_panel, \"form\")?.[0];\n            if (form) {\n                events.add_event_listener(\n                    form,\n                    \"submit\",\n                    \"tiptap_source_submit\",\n                    (e) => {\n                        // Prevent form submission when hitting \"enter\" within the form.\n                        // The form is handled by JS only.\n                        e.preventDefault();\n                    }\n                );\n            }\n            if (source_confirm) {\n                // update on click on confirm\n                events.add_event_listener(\n                    source_confirm,\n                    \"click\",\n                    \"tiptap_source_confirm\",\n                    () => update_callback(true)\n                );\n            } else {\n                // update on input/change\n                events.add_event_listener(\n                    source_text,\n                    \"input\",\n                    \"tiptap_source_text\",\n                    update_callback\n                );\n            }\n        },\n    };\n}\n\nexport function init({ app, button }) {\n    button.addEventListener(\"click\", () => {\n        if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n            // If this pat-tiptap instance is not the one which was last\n            // focused, just return and do nothing.\n            // This might be due to one toolbar shared by multiple editors.\n            return;\n        }\n\n        // Register the source-panel pattern.\n        // Multiple registrations from different tiptap instances are possible\n        // since we're registering it only after the toolbar's source button has\n        // been clicked and clicking in another tiptap instance would override\n        // previous registrations.\n        const source_panel_pattern = source_panel({ app: app });\n        document.addEventListener(\n            \"patterns-injected-delayed\",\n            (e) => {\n                source_panel_pattern.init(e.detail.injected);\n\n                // Register listener on modal for any DOM changes done by pat-inject.\n                app.current_modal.addEventListener(\"patterns-injected-delayed\", () => {\n                    // Re-init panel after injection.\n                    source_panel_pattern.init(app.current_modal);\n                });\n            },\n            { once: true }\n        );\n    });\n}\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["init","app","button","addEventListener","dom","toolbar_el","source_panel_pattern","name","trigger","options","sourcePanel","source_panel","focus_handler","source_text","querySelector","source_confirm","value","editor","getHTML","dispatchEvent","Event","update_callback","set_focus","cmd","chain","focus","setContent","run","form","events","e","preventDefault","log","document","detail","injected","current_modal","once","i","TARGETS","el","setAttribute","utils","map","it","classList","add","remove"],"sourceRoot":""}