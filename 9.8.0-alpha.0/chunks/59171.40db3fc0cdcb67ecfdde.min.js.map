{"version":3,"file":"chunks/59171.40db3fc0cdcb67ecfdde.min.js","mappings":"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","sources":["webpack://ploneintranet-patterns/./node_modules/@patternslib/pat-tiptap/src/extensions/image-figure.js"],"sourcesContent":["import { context_menu, context_menu_close } from \"../context_menu\";\nimport { focus_handler } from \"../focus-handler\";\nimport { Node, mergeAttributes } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport Registry from \"@patternslib/patternslib/src/core/registry\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nlet context_menu_instance;\n\nfunction pattern_image_context_menu({ app: app }) {\n    return Base.extend({\n        name: \"tiptap-image-context-menu\",\n        trigger: \".tiptap-image-context-menu\",\n        autoregister: false,\n        init() {\n            focus_handler(this.el);\n\n            const btn_edit = this.el.querySelector(\".tiptap-edit-image\");\n            const btn_remove = this.el.querySelector(\".tiptap-remove-image\");\n\n            btn_edit &&\n                btn_edit.addEventListener(\"click\", () => {\n                    app.toolbar.image.click();\n                });\n\n            btn_remove &&\n                btn_remove.addEventListener(\"click\", () => {\n                    app.editor.commands.selectParentNode(); // Also select the surrounding <figure>\n                    app.editor.commands.deleteSelection();\n                    app.editor.commands.focus();\n                });\n        },\n    });\n}\n\nfunction image_panel({ app }) {\n    // Not Base-pattern based due to two reasons:\n    // - We need to reinitialize the pattern on already initialized nodes on possible tab-changes within the modal.\n    // - We need to keep the _node_image and _node_figure references among re-initializations.\n    return {\n        name: \"tiptap-image-panel\",\n        trigger: app.options.image?.panel,\n        autoregister: false,\n\n        init($el) {\n            this.el = $el;\n            if ($el.jquery) {\n                this.el = $el[0];\n            }\n\n            const image_panel = this.el;\n\n            const image_srcs = image_panel.querySelectorAll(\"[name=tiptap-src]\");\n            const image_alt = image_panel.querySelector(\"[name=tiptap-alt]\");\n            const image_title = image_panel.querySelector(\"[name=tiptap-title]\");\n            const image_caption = image_panel.querySelector(\"[name=tiptap-caption]\");\n            const image_confirm = image_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n            focus_handler(image_panel);\n\n            const node_image = this.get_node_image();\n\n            // Populate form fields\n            if (node_image) {\n                const current_src = node_image.attrs?.src;\n                // Filter for all inputs with the same src value but not an empty src.\n                let image_srcs_ = current_src\n                    ? [...image_srcs].filter((it) => it.value === current_src)\n                    : [];\n                if (image_srcs_.length > 0) {\n                    for (const image_src of image_srcs_) {\n                        image_src.checked = true;\n                        image_src.dispatchEvent(events.change_event());\n                    }\n                } else {\n                    let image_srcs_ = [...image_srcs].filter(\n                        (it) => it.type === \"text\" || it.type === \"url\"\n                    );\n                    if (image_srcs_.length > 0 && !image_srcs_[0].value) {\n                        image_srcs_[0].value = current_src || \"\";\n                    }\n                }\n                if (image_title && !image_title.value) {\n                    image_title.value = node_image.attrs?.title || \"\";\n                }\n                if (image_alt && !image_alt.value) {\n                    image_alt.value = node_image.attrs?.alt || \"\";\n                }\n            }\n\n            // Get / set figcaption node, if it exists\n            const node_figcaption = this.get_figcaption_node();\n            if (node_figcaption && image_caption && !image_caption.value) {\n                image_caption.value = node_figcaption.textContent || \"\";\n            }\n\n            const update_callback = (set_focus) => {\n                // Get the selected image on time of submitting\n                const selected_image_src = image_panel.querySelector(\n                    `[name=tiptap-src][type=radio]:checked,\n                         [name=tiptap-src][type=checkbox]:checked,\n                         [name=tiptap-src][type=option]:checked,\n                         [name=tiptap-src][type=hidden],\n                         [name=tiptap-src][type=text],\n                         [name=tiptap-src][type=url]`\n                );\n\n                app.editor.commands.insertContent({\n                    type: \"figure\",\n                    content: [\n                        {\n                            type: \"image-figure\",\n                            attrs: {\n                                src: selected_image_src.value,\n                                ...(image_alt?.value && { alt: image_alt.value }),\n                                ...(image_title?.value && {\n                                    title: image_title.value,\n                                }),\n                            },\n                        },\n                        // Conditionally add a figcaption\n                        ...(image_caption?.value\n                            ? [\n                                  {\n                                      type: \"figcaption\",\n                                      content: [\n                                          {\n                                              type: \"text\",\n                                              text: image_caption.value,\n                                          },\n                                      ],\n                                  },\n                              ]\n                            : []),\n                    ],\n                });\n                if (set_focus === true) {\n                    // set cursor after the image, otherwise image is\n                    // selected and right away deleted when starting typing.\n                    app.editor.commands.selectParentNode();\n                    app.editor.commands.focus(app.editor.state.selection.to);\n                    //app.editor.commands.blur();\n                }\n            };\n\n            // FORM UPDATE\n            const form = dom.querySelectorAllAndMe(image_panel, \"form\")?.[0];\n            if (form) {\n                events.add_event_listener(form, \"submit\", \"tiptap_image_submit\", (e) => {\n                    // Prevent form submission when hitting \"enter\" within the form.\n                    // The form is handled by JS only.\n                    e.preventDefault();\n                });\n            }\n            if (image_confirm) {\n                // update on click on confirm\n                events.add_event_listener(\n                    image_confirm,\n                    \"click\",\n                    \"tiptap_image_confirm\",\n                    () => update_callback(true)\n                );\n            } else {\n                // update on input/change\n                for (const image_src of image_srcs) {\n                    events.add_event_listener(\n                        image_src,\n                        \"change\",\n                        \"tiptap_image_src\",\n                        update_callback\n                    );\n                }\n                events.add_event_listener(\n                    image_alt,\n                    \"change\",\n                    \"tiptap_image_alt\",\n                    update_callback\n                );\n                events.add_event_listener(\n                    image_title,\n                    \"change\",\n                    \"tiptap_image_title\",\n                    update_callback\n                );\n                events.add_event_listener(\n                    image_caption,\n                    \"change\",\n                    \"tiptap_image_caption\",\n                    update_callback\n                );\n            }\n        },\n\n        _node_image: null,\n        get_node_image() {\n            // Get image node\n            if (this._node_image || this._node_image === undefined) {\n                return this._node_image;\n            }\n            this._node_image = app.editor.state.doc.nodeAt(\n                app.editor.state.selection.from\n            );\n            return this._node_image;\n        },\n\n        _figcaption: null, // initialized as null. If not found this will be set to undefined.\n        get_figcaption_node() {\n            // Return cached figcaption and avoid calling this method multiple times.\n            // Calling it again would select again a parent node which would lead to incorrect results.\n            // TODO: make a getter / setter\n            if (this._figcaption || this._figcaption === undefined) {\n                return this._figcaption;\n            }\n\n            app.editor.commands.selectParentNode(); // Also select the surrounding <figure>\n            const node_figure = app.editor.state.doc.nodeAt(\n                app.editor.state.selection.from\n            );\n            const node_figcaption = node_figure?.content.content.filter(\n                (it) => it.type.name === \"figcaption\"\n            )?.[0];\n            this._figcaption = node_figcaption; // if not found, this is undefined.\n            return node_figcaption;\n        },\n    };\n}\n\nexport function init({ app, button }) {\n    button.addEventListener(\"click\", () => {\n        if (dom.get_data(app.toolbar_el, \"tiptap-instance\", null) !== app) {\n            // If this pat-tiptap instance is not the one which was last\n            // focused, just return and do nothing.\n            // This might be due to one toolbar shared by multiple editors.\n            return;\n        }\n\n        // Register the image-panel pattern.\n        // Multiple registrations from different tiptap instances are possible\n        // since we're registering it only after the toolbar's image button has\n        // been clicked and clicking in another tiptap instance would override\n        // previous registrations.\n        const image_panel_pattern = image_panel({ app: app });\n        Registry.patterns[image_panel_pattern.name] = image_panel_pattern;\n\n        document.addEventListener(\n            \"patterns-injected-delayed\",\n            (e) => {\n                Registry.scan(e.detail.injected, [image_panel_pattern.name]);\n\n                // Register listener on modal for any DOM changes done by pat-ineject.\n                app.current_modal.addEventListener(\"patterns-injected-delayed\", () => {\n                    // Fore re-init of the image-panel pattern.\n                    image_panel_pattern.init(app.current_modal);\n                });\n            },\n            { once: true }\n        );\n    });\n\n    app.editor.on(\"selectionUpdate\", async () => {\n        app.editor.isActive(\"image-figure\")\n            ? button.classList.add(\"active\")\n            : button.classList.remove(\"active\");\n        app.editor.can().setImage()\n            ? button.classList.remove(\"disabled\")\n            : button.classList.add(\"disabled\");\n\n        if (app.options.image.menu) {\n            // Open the context menu with a small delay.\n            utils.debounce(async () => {\n                if (!app.editor.isActive(\"image-figure\")) {\n                    // Image not active anymore. Return.\n                    if (context_menu_instance) {\n                        // If open, close.\n                        context_menu_close({\n                            instance: context_menu_instance,\n                            pattern_name: \"tiptap-image-context-menu\",\n                        });\n                        context_menu_instance = null;\n                    }\n                    return;\n                }\n\n                // Initialize the context menu\n                context_menu_instance = await context_menu({\n                    url: app.options.image.menu,\n                    editor: app.editor,\n                    instance: context_menu_instance,\n                    pattern: pattern_image_context_menu({ app: app }),\n                    extra_class: \"tiptap-image-menu\",\n                });\n            }, 50)();\n        }\n    });\n}\n\nexport const factory = () => {\n    return Node.create({\n        name: \"image-figure\",\n\n        addOptions() {\n            return {\n                HTMLAttributes: {},\n            };\n        },\n\n        addAttributes() {\n            return {\n                src: {\n                    default: null,\n                },\n                alt: {\n                    default: null,\n                },\n                title: {\n                    default: null,\n                },\n            };\n        },\n\n        group: \"block\",\n        inline: false,\n\n        allowGapCursor: false,\n        atom: true,\n        draggable: false,\n        isolating: true,\n        selectable: true,\n\n        parseHTML() {\n            return [\n                {\n                    tag: \"img\",\n                    getAttrs: (node) => node.closest(\"figure\") !== null && null, // prosemirror expects null for a successful check.\n                },\n            ];\n        },\n\n        renderHTML({ HTMLAttributes }) {\n            return [\"img\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n        },\n\n        addProseMirrorPlugins() {\n            return [\n                new Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            dragstart: (view, event) => {\n                                // prevent drag/drop at all.\n                                event.preventDefault();\n                                return false;\n                            },\n                        },\n                    },\n                }),\n            ];\n        },\n    });\n};\n"],"names":["context_menu_instance","i","pattern_image_context_menu","app","Base","name","trigger","autoregister","init","focus_handler","this","el","btn_edit","querySelector","btn_remove","addEventListener","toolbar","image","click","editor","commands","selectParentNode","deleteSelection","focus","button","dom","toolbar_el","image_panel_pattern","options","panel","$el","jquery","image_panel","image_srcs","querySelectorAll","image_alt","image_title","image_caption","image_confirm","node_image","get_node_image","current_src","attrs","src","image_srcs_","filter","it","value","length","image_src","checked","dispatchEvent","events","type","title","alt","node_figcaption","get_figcaption_node","textContent","update_callback","set_focus","selected_image_src","insertContent","content","text","state","selection","to","form","e","preventDefault","_node_image","undefined","doc","nodeAt","from","_figcaption","node_figure","Registry","document","detail","injected","current_modal","once","on","isActive","classList","add","remove","can","setImage","menu","utils","context_menu_close","instance","pattern_name","context_menu","url","pattern","extra_class","factory","Node","addOptions","HTMLAttributes","addAttributes","default","group","inline","allowGapCursor","atom","draggable","isolating","selectable","parseHTML","tag","getAttrs","node","closest","renderHTML","mergeAttributes","addProseMirrorPlugins","Plugin","props","handleDOMEvents","dragstart","view","event"],"sourceRoot":""}