{"version":3,"file":"chunks/51575.c3f4f0a4d8bdd8488370.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-ordered-list/dist/index.js"],"sourcesContent":["import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\n\nconst ListItem = Node.create({\r\n    name: 'listItem',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    content: 'paragraph block*',\r\n    defining: true,\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'li',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Enter: () => this.editor.commands.splitListItem(this.name),\r\n            Tab: () => this.editor.commands.sinkListItem(this.name),\r\n            'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\r\n        };\r\n    },\r\n});\n\nconst TextStyle = Mark.create({\r\n    name: 'textStyle',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'span',\r\n                getAttrs: element => {\r\n                    const hasStyles = element.hasAttribute('style');\r\n                    if (!hasStyles) {\r\n                        return false;\r\n                    }\r\n                    return {};\r\n                },\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            removeEmptyTextStyle: () => ({ state, commands }) => {\r\n                const attributes = getMarkAttributes(state, this.type);\r\n                const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\r\n                if (hasStyles) {\r\n                    return true;\r\n                }\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n});\n\nconst inputRegex = /^(\\d+)\\.\\s$/;\r\nconst OrderedList = Node.create({\r\n    name: 'orderedList',\r\n    addOptions() {\r\n        return {\r\n            itemTypeName: 'listItem',\r\n            HTMLAttributes: {},\r\n            keepMarks: false,\r\n            keepAttributes: false,\r\n        };\r\n    },\r\n    group: 'block list',\r\n    content() {\r\n        return `${this.options.itemTypeName}+`;\r\n    },\r\n    addAttributes() {\r\n        return {\r\n            start: {\r\n                default: 1,\r\n                parseHTML: element => {\r\n                    return element.hasAttribute('start')\r\n                        ? parseInt(element.getAttribute('start') || '', 10)\r\n                        : 1;\r\n                },\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'ol',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        const { start, ...attributesWithoutStart } = HTMLAttributes;\r\n        return start === 1\r\n            ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\r\n            : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleOrderedList: () => ({ commands, chain }) => {\r\n                if (this.options.keepAttributes) {\r\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\r\n                }\r\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        let inputRule = wrappingInputRule({\r\n            find: inputRegex,\r\n            type: this.type,\r\n            getAttributes: match => ({ start: +match[1] }),\r\n            joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\r\n        });\r\n        if (this.options.keepMarks || this.options.keepAttributes) {\r\n            inputRule = wrappingInputRule({\r\n                find: inputRegex,\r\n                type: this.type,\r\n                keepMarks: this.options.keepMarks,\r\n                keepAttributes: this.options.keepAttributes,\r\n                getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyle.name) }),\r\n                joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\r\n                editor: this.editor,\r\n            });\r\n        }\r\n        return [\r\n            inputRule,\r\n        ];\r\n    },\r\n});\n\nexport { OrderedList, OrderedList as default, inputRegex };\n//# sourceMappingURL=index.js.map\n"],"names":["ListItem","Node","name","addOptions","HTMLAttributes","content","defining","parseHTML","tag","renderHTML","mergeAttributes","this","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","liftListItem","TextStyle","Mark","getAttrs","element","hasAttribute","addCommands","removeEmptyTextStyle","state","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark","inputRegex","OrderedList","itemTypeName","keepMarks","keepAttributes","group","addAttributes","start","default","parseInt","getAttribute","attributesWithoutStart","toggleOrderedList","chain","toggleList","updateAttributes","getAttributes","run","addInputRules","inputRule","wrappingInputRule","find","match","joinPredicate","node","childCount","attrs"],"sourceRoot":""}